rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ================== CORE SECURITY FUNCTIONS ==================
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isSystem() {
      return request.auth.token.firebase.sign_in_provider == 'system';
    }

    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }

    function isAdmin() {
      return isAuthenticated() 
             && request.auth.token.get('admin', false) == true
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function hasRole(role) {
      return isAuthenticated() 
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == role;
    }

    function isValidDocumentType(type) {
      return type in ['id_front', 'id_back', 'utility_bill', 'lease_agreement'];
    }

    function withinOperatingHours() {
      return request.time.hours() >= 8 && request.time.hours() < 20;
    }

    function isValidUserDocument() {
      return request.resource.data.keys().hasOnly([
        'email', 'userType', 'createdAt', 'updatedAt', 
        'profileComplete', 'lastLogin', 'metadata'
      ]) && isValidEmail(request.resource.data.email);
    }

    function isValidPaymentDocument() {
      return request.resource.data.keys().hasOnly([
        'amount', 'currency', 'recipientId', 'billerInfo',
        'processedAt', 'status', 'transactionId', 'metadata'
      ]) && request.resource.data.amount > 0
         && request.resource.data.currency == 'USD';
    }

    function mandatoryMetadata() {
      return 'metadata' in request.resource.data
             && 'createdBy' in request.resource.data.metadata
             && 'updatedBy' in request.resource.data.metadata
             && 'environment' in request.resource.data.metadata;
    }

    // Simplified subscription status validation
    function isValidStatusTransition(subId) {
      let newStatus = request.resource.data.subscription.status;
      let validStatuses = ['inactive', 'active', 'past_due', 'canceled', 'trial'];
      
      return validStatuses.hasAny([newStatus]) && 
             (isSystem() || (request.auth.uid == subId && 
             (newStatus == 'inactive' || newStatus == 'canceled')));
    }

    function hasValidStripeMetadata() {
      return request.resource.data.subscription.stripeSubscriptionId is string &&
             request.resource.data.subscription.stripePriceId is string &&
             request.resource.data.subscription.stripeCustomerId is string;
    }

    // ================== COLLECTION RULES ==================
    match /users/{userId} {
      allow create: if isAuthenticated()
                    && request.auth.uid == userId
                    && request.resource.data.userType in ['applicant', 'subscriber'];

      allow read: if isAdmin() 
                   || (isAuthenticated() && request.auth.uid == userId);

      allow update: if isAuthenticated()
                    && request.auth.uid == userId
                    && request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['profileComplete', 'lastLogin', 'metadata'])
                    && resource.data.userType == request.resource.data.userType;
      
      // Rules for profile subcollection
      match /profile/{profileDoc} {
        allow read: if isAuthenticated() && request.auth.uid == userId;
        allow create, update: if isAuthenticated() && request.auth.uid == userId;
        allow delete: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    match /subscribers/{subId} {
      // Allow initial creation during signup OR by system processes
      allow create: if (isAuthenticated() && request.auth.uid == subId) || isSystem();
      
      // Allow users to read their own subscriber data or if they're an admin
      allow read: if isAdmin() 
                  || (isAuthenticated() && request.auth.uid == subId);

      // Allow updates by: subscribers themselves (limited) or system processes
      allow update: if (isSystem() ||
                     (isAuthenticated() && request.auth.uid == subId && 
                      isValidStatusTransition(subId))) && 
                     request.resource.data.subscription.updatedAt is timestamp;
                       
      match /subscription/{doc} {
        allow get: if isAuthenticated() && request.auth.uid == subId;
      }
    }
    
    match /subscriptionIntegrityLogs/{logId} {
      allow create: if isSystem();
      allow read: if isAdmin();
      allow delete: if false; // Immutable logs - never delete
    }
    
    match /subscriptionIntegrityChecks/{checkId} {
      allow create: if isSystem();
      allow read: if isAdmin();
      allow delete: if false;
    }
    
    match /subscriptionStatusAccesses/{accessId} {
      allow create: if isSystem() || isAuthenticated();
      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow delete: if false;
    }
    
    match /rateLimits/{limitId} {
      allow read, write: if isSystem();
    }

    match /applicants/{applicantId} {
      allow create: if (isAuthenticated() && request.auth.uid == applicantId) || 
                     (isSystem() && request.resource.data.status == 'PENDING_REVIEW');

      allow read: if isAdmin() 
                  || (isAuthenticated() && request.auth.uid == applicantId);

      allow update: if (isAuthenticated() && request.auth.uid == applicantId) ||
                    isAdmin();
    }
    
    match /verificationCodes/{userId} {
      allow create: if isAuthenticated() && request.auth.uid == userId &&
                    request.resource.data.keys().hasAll(['code', 'email', 'createdAt', 'expiresAt', 'verified']);
      
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      allow update: if isAuthenticated() && 
                     ((isAdmin() && resource.data.verified == false) || 
                      (request.auth.uid == userId && resource.data.verified == false));
                    
      allow write: if isSystem();
    }

    match /preVerificationCodes/{verificationId} {
      allow create: if request.resource.data.keys().hasAll(['code', 'email', 'userType', 'createdAt', 'expiresAt', 'verified']) && 
                    isValidEmail(request.resource.data.email) && 
                    request.resource.data.verified == false;
                    
      allow read: if true;
      
      allow update: if resource.data.verified == false && 
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['verified', 'verifiedAt']);
                    
      allow write: if isSystem();
    }

    match /documents/{docId} {
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid
                    && isValidDocumentType(request.resource.data.type)
                    && request.resource.data.filePath.matches('^gs://[a-z0-9-]+\\.appspot\\.com/')
                    && request.resource.data.size < 5242880; // 5MB

      allow read: if isAdmin() 
                  || (isAuthenticated() 
                      && request.auth.uid == resource.data.userId);

      allow delete: if false;
    }

    match /payments/{paymentId} {
      allow create: if isAdmin()
                    && isValidPaymentDocument()
                    && exists(/databases/$(database)/documents/applicants/$(request.resource.data.recipientId));

      allow read: if isAdmin() 
                  || (isAuthenticated() 
                      && request.auth.uid == resource.data.recipientId);

      allow update, delete: if false;
    }

    match /audit/{auditId} {
      allow create: if isSystem()
                    && request.resource.data.keys().hasAll([
                      'actionType', 'userId', 'targetId',
                      'timestamp', 'ipAddress', 'userAgent'
                    ]);

      allow read: if isAdmin();
    }

    match /config/{documentId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin()
                    && request.resource.data.keys().hasOnly([
                      'appSettings', 'paymentConfig', 'metadata'
                    ]);
    }

    match /fraud_reports/{reportId} {
      allow read: if isAdmin();
      allow write: if false; // Only via Cloud Functions
    }

    match /api_keys/{keyId} {
      allow read: if isAdmin();
      allow write: if false;
    }

    match /backups/{backupId} {
      allow read, write: if false; // Managed externally
    }

    match /encryption_keys/{keyId} {
      allow read, write: if false;
    }

    // Default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
